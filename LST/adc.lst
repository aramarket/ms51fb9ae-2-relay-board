C51 COMPILER V9.60.7.0   ADC                                                               11/07/2024 11:34:52 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Output\adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\adc.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Header;.\StdDriver\in
                    -c) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\adc.lst) TABS(2) OBJECT(.\Output\adc.obj)

line level    source

   1          #include "MS51_16K.h"
   2          #include "adc.h"
   3          
   4          #define V_REF           5.0       // ADC reference voltage in volts
   5          #define ADC_MAX         4095      // 12-bit ADC
   6          #define R1              330000.0  // Ohms
   7          #define R2              1500.0    // Ohms
   8          #define FACTOR_RMS      0.7071    // 1/sqrt(2)
   9          #define NUM_SAMPLES     100       // Number of samples for averaging
  10          
  11          
  12          void int_ADC(void);
  13          unsigned int read_ADC(int channel);
  14          unsigned int calculate_ac_voltage(int channel);
  15          
  16          // Function to initialize the ADC
  17          void int_ADC(void) {
  18   1          ENABLE_ADC_BANDGAP;  // Enable the Bandgap reference for the ADC
  19   1          
  20   1          AINDIDS = 0x00;      // Clear AINDIDS registerr
  21   1          AINDIDS |= SET_BIT4; // Select P05 as ADC input channel
  22   1          AINDIDS |= SET_BIT3; // Select P06 as ADC output channel
  23   1      }
  24          
  25          // Function to read the ADC value
  26          unsigned int read_ADC(int channel) {
  27   1          unsigned int val = 0;
  28   1        
  29   1          // Enable the specified ADC channel based on the pin constant
  30   1          switch (channel) {
  31   2              case P_17: ENABLE_ADC_AIN0; break; // Read from ADC Channel 0 (P_17)
  32   2              case P_30: ENABLE_ADC_AIN1; break; // Read from ADC Channel 1 (P_30)
  33   2              case P_07: ENABLE_ADC_AIN2; break; // Read from ADC Channel 2 (P_07)
  34   2              case P_06: ENABLE_ADC_AIN3; break; // Read from ADC Channel 3 (P_06)
  35   2              case P_05: ENABLE_ADC_AIN4; break; // Read from ADC Channel 4 (P_05)
  36   2              case P_04: ENABLE_ADC_AIN5; break; // Read from ADC Channel 5 (P_04)
  37   2              case P_03: ENABLE_ADC_AIN6; break; // Read from ADC Channel 6 (P_03)
  38   2              case P_11: ENABLE_ADC_AIN7; break; // Read from ADC Channel 7 (P_11)
  39   2              default: return 0; // Invalid pin
  40   2          }
  41   1        
  42   1          clr_ADCF;              // Clear the ADC flag
  43   1          set_ADCS;              // Start ADC conversion
  44   1      
  45   1          while (ADCF == 0);     // Wait until the conversion is complete
  46   1      
  47   1          // Read the low byte of the ADC result
  48   1          val |= ADCRL;          // Get lower 8 bits of the result
  49   1          // Read the high byte of the ADC result
  50   1          val |= (ADCRH << 4);   // Get higher 4 bits and combine with low byte
  51   1      
  52   1          val &= 0xFFFF;         // Ensure value is 16 bits
  53   1      
  54   1          return val;            // Return the ADC value
C51 COMPILER V9.60.7.0   ADC                                                               11/07/2024 11:34:52 PAGE 2   

  55   1      }
  56          
  57          // Function to convert ADC value to voltage with averaging
  58          unsigned int calculate_ac_voltage(int channel) {
  59   1          int i;
  60   1          unsigned long adc_sum = 0;
  61   1          float V_adc, V_dc, V_rms, adc_avg;      
  62   1      
  63   1          // Take multiple samples and accumulate them
  64   1          for (i = 0; i < NUM_SAMPLES; i++) {
  65   2              adc_sum += read_ADC(channel);  // Read ADC value and add to the sum
  66   2          }
  67   1          
  68   1          // Calculate the average ADC value
  69   1          adc_avg = (float)adc_sum / NUM_SAMPLES;   //260 ADC value for 100vac
  70   1      
  71   1          // Convert ADC average to voltage
  72   1          V_adc = (adc_avg / ADC_MAX) * V_REF;  //0.317  Vdc voltage at pin of mc
  73   1                                                            
  74   1          // Calculate peak voltage before voltage divider
  75   1          V_dc = V_adc / (R2 / (R1 + R2));   //70.0    Vdc after voltage divider
  76   1      
  77   1          // Convert Vdc to Vac
  78   1          V_rms = V_dc / FACTOR_RMS;         // 99.07 Vac after convert dc to ac
  79   1          
  80   1          // Add Doide drop
  81   1          V_rms +=  0.9;                  // 100 Vac 
  82   1          
  83   1          // Constants for calibration
  84   1          V_rms *=  1.58;
  85   1          return (unsigned int)V_rms;
  86   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    536    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
