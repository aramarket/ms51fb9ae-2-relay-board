C51 COMPILER V9.60.7.0   FLASH                                                             11/04/2024 11:57:08 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE FLASH
OBJECT MODULE PLACED IN .\Output\Flash.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Common\Flash.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEFINE(F
                    -OSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\Flash.lst) TABS(2) OBJECT(.\Output\Flash.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "SFR_Macro.h"
   3          #include "Function_define.h"
   4          #include "Common.h"
   5          #include "Delay.h"
   6          #include "Flash.h"
   7          #include "Seven_segment.h"
   8          
   9          static unsigned char EA_Save_bit;
  10          
  11          void enable_IAP_mode(void)
  12          {
  13   1          EA_Save_bit = EA;
  14   1          clr_EA;
  15   1          TA = 0xAA;
  16   1          TA = 0x55;
  17   1          CHPCON |= 0x01 ;
  18   1          TA = 0xAA;
  19   1          TA = 0x55;
  20   1          IAPUEN |= 0x01;
  21   1          EA = EA_Save_bit;
  22   1      }
  23          void disable_IAP_mode(void)
  24          {
  25   1          EA_Save_bit = EA;
  26   1          clr_EA;
  27   1          TA = 0xAA;
  28   1          TA = 0x55;
  29   1          IAPUEN &= ~0x01;
  30   1          TA = 0xAA;
  31   1          TA = 0x55;
  32   1          CHPCON &=~ 0x01;
  33   1          EA = EA_Save_bit;
  34   1      
  35   1      }
  36          void trigger_IAP(void)
  37          {
  38   1          EA_Save_bit = EA;
  39   1          clr_EA;
  40   1          TA = 0xAA;
  41   1          TA = 0x55;
  42   1          IAPTRG |= 0x01;
  43   1          EA = EA_Save_bit;
  44   1      }
  45          unsigned char write_data_to_one_page(unsigned int u16_addr, const unsigned char *pDat, unsigned char num)
  46          {
  47   1          unsigned char i = 0;
  48   1          unsigned char offset = 0;
  49   1          unsigned char code *pCode;
  50   1          unsigned char xdata *xd_tmp;
  51   1          enable_IAP_mode();
  52   1          offset = (u16_addr & 0x007F);
  53   1          i = (PAGE_SIZE - offset);
  54   1          if(num > i)
C51 COMPILER V9.60.7.0   FLASH                                                             11/04/2024 11:57:08 PAGE 2   

  55   1          {
  56   2            num = i;
  57   2          }
  58   1          pCode = (unsigned char code *)u16_addr;
  59   1          for(i = 0; i < num; i++)
  60   1          {
  61   2              if(pCode[i] != 0xFF)
  62   2              {
  63   3                break;
  64   3              }
  65   2          }
  66   1          if(i == num)
  67   1          {
  68   2              IAPCN = BYTE_PROGRAM_AP;
  69   2              IAPAL = u16_addr;
  70   2              IAPAH = (u16_addr >> 8);
  71   2              for(i = 0; i < num; i++)
  72   2              {
  73   3                IAPFD = pDat[i];
  74   3                trigger_IAP();
  75   3                IAPAL++;
  76   3              }
  77   2              for(i = 0; i < num; i++)
  78   2              {
  79   3                if(pCode[i] != pDat[i])
  80   3                {
  81   4                         break;   
  82   4                } 
  83   3              }
  84   2              if(i != num)
  85   2              {
  86   3                goto WriteDataToPage20;
  87   3              }
  88   2          }
  89   1          else
  90   1          {
  91   2            WriteDataToPage20:
  92   2            pCode = (unsigned char code *)(u16_addr & 0xFF80);
  93   2            for(i = 0; i < 128; i++)
  94   2            {
  95   3                 xd_tmp[i] = pCode[i];
  96   3            }
  97   2            for(i = 0; i < num; i++)
  98   2            {
  99   3                xd_tmp[offset + i] = pDat[i];
 100   3            }
 101   2            do
 102   2            {
 103   3                 IAPAL = (u16_addr & 0xFF80);
 104   3                 IAPAH = (u16_addr >> 8);
 105   3                 IAPCN = PAGE_ERASE_AP;
 106   3                 IAPFD = 0xFF;    
 107   3                 trigger_IAP();
 108   3                 IAPCN =BYTE_PROGRAM_AP;
 109   3                 for(i = 0; i < 128; i++)
 110   3                 {
 111   4                      IAPFD = xd_tmp[i];
 112   4                      trigger_IAP();
 113   4                      IAPAL++;
 114   4                 }
 115   3                 for(i = 0; i < 128; i++)
 116   3                 {
C51 COMPILER V9.60.7.0   FLASH                                                             11/04/2024 11:57:08 PAGE 3   

 117   4                      if(pCode[i] != xd_tmp[i])
 118   4                      {
 119   5                          break;
 120   5                      }
 121   4                 }
 122   3            }while(i != 128);
 123   2          }
 124   1          disable_IAP_mode();
 125   1          return num;
 126   1      }   
 127          void write_data_flash(unsigned int u16_addr, unsigned char *pDat,unsigned int num)
 128          {
 129   1          unsigned int CPageAddr = 0;
 130   1          unsigned int EPageAddr = 0;
 131   1          unsigned int cnt = 0;
 132   1          CPageAddr = (u16_addr >> 7);
 133   1          EPageAddr = ((u16_addr + num) >> 7);
 134   1          while(CPageAddr != EPageAddr)
 135   1          {
 136   2            cnt = write_data_to_one_page(u16_addr, pDat, 128);
 137   2            u16_addr += cnt;
 138   2            pDat += cnt;
 139   2            num -= cnt;
 140   2            CPageAddr = (u16_addr >> 7);
 141   2          }
 142   1          if(num)
 143   1          {
 144   2            write_data_to_one_page(u16_addr, pDat, num);
 145   2          }
 146   1      }
 147          void read_data_flash(unsigned int u16_addr, unsigned char *pDat, unsigned int num)
 148          {
 149   1          unsigned int i = 0;
 150   1          for(i = 0; i < num; i++)
 151   1          {
 152   2              pDat[i] = *(unsigned char code *)(u16_addr+i);
 153   2          }
 154   1      
 155   1      }
 156          
 157          void write_eeprom(unsigned int write_add, unsigned int write_val_var){
 158   1        unsigned char write_val1[1] = {0},write_val2[1] = {0};
 159   1        write_val1[0] = write_val_var;
 160   1        write_val2[0] = write_val_var >> 8;
 161   1        write_data_flash(write_add, write_val1, 1);
 162   1        write_data_flash(write_add+1, write_val2, 1);
 163   1      }
 164          unsigned int read_eeprom(unsigned int read_add){
 165   1        unsigned char read_val[1] = {0};
 166   1        read_data_flash(read_add, read_val, 1);
 167   1        return read_val[0];
 168   1      }
 169          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1173    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =      1      41
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   FLASH                                                             11/04/2024 11:57:08 PAGE 4   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
