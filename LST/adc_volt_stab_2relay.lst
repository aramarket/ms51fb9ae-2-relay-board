C51 COMPILER V9.60.7.0   ADC_VOLT_STAB_2RELAY                                              11/06/2024 10:55:05 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ADC_VOLT_STAB_2RELAY
OBJECT MODULE PLACED IN .\Output\adc_volt_stab_2relay.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\adc_volt_stab_2relay.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Incl
                    -ude) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\adc_volt_stab_2relay.lst) TABS(2) OBJECT(.\Output\adc_volt_stab_
                    -2relay.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "SFR_Macro.h"
   3          #include "Function_define.h"
   4          #include "adc.h"
   5          
   6          #define V_REF           5.0       // ADC reference voltage in volts
   7          #define ADC_MAX         4095      // 12-bit ADC
   8          #define R1              330000.0  // Ohms
   9          #define R2              1500.0    // Ohms
  10          #define FACTOR_RMS      0.7071    // 1/sqrt(2)
  11          #define NUM_SAMPLES     50        // Number of samples for averaging
  12          
  13          
  14          void int_ADC(void);
  15          unsigned int read_ADC(int channel);
  16          unsigned int calculate_ac_voltage(int channel);
  17          
  18          // Function to initialize the ADC
  19          void int_ADC(void) {
  20   1          Enable_ADC_BandGap;  // Enable the Bandgap reference for the ADC
  21   1          
  22   1          AINDIDS = 0x00;      // Clear AINDIDS registerr
  23   1          AINDIDS |= SET_BIT4; // Select P05 as ADC input channel
  24   1          AINDIDS |= SET_BIT3; // Select P06 as ADC output channel
  25   1      }
  26          
  27          // Function to read the ADC value
  28          unsigned int read_ADC(int channel) {
  29   1          unsigned int val = 0;
  30   1        
  31   1          // Enable the specified ADC channel based on the pin constant
  32   1          switch (channel) {
  33   2              case P_17: Enable_ADC_AIN0; break; // Read from ADC Channel 0 (P_17)
  34   2              case P_30: Enable_ADC_AIN1; break; // Read from ADC Channel 1 (P_30)
  35   2              case P_07: Enable_ADC_AIN2; break; // Read from ADC Channel 2 (P_07)
  36   2              case P_06: Enable_ADC_AIN3; break; // Read from ADC Channel 3 (P_06)
  37   2              case P_05: Enable_ADC_AIN4; break; // Read from ADC Channel 4 (P_05)
  38   2              case P_04: Enable_ADC_AIN5; break; // Read from ADC Channel 5 (P_04)
  39   2              case P_03: Enable_ADC_AIN6; break; // Read from ADC Channel 6 (P_03)
  40   2              case P_11: Enable_ADC_AIN7; break; // Read from ADC Channel 7 (P_11)
  41   2              default: return 0; // Invalid pin
  42   2          }
  43   1        
  44   1          clr_ADCF;              // Clear the ADC flag
  45   1          set_ADCS;              // Start ADC conversion
  46   1      
  47   1          while (ADCF == 0);     // Wait until the conversion is complete
  48   1      
  49   1          // Read the low byte of the ADC result
  50   1          val |= ADCRL;          // Get lower 8 bits of the result
  51   1          // Read the high byte of the ADC result
  52   1          val |= (ADCRH << 4);   // Get higher 4 bits and combine with low byte
  53   1      
C51 COMPILER V9.60.7.0   ADC_VOLT_STAB_2RELAY                                              11/06/2024 10:55:05 PAGE 2   

  54   1          val &= 0xFFFF;         // Ensure value is 16 bits
  55   1      
  56   1          return val;            // Return the ADC value
  57   1      }
  58          
  59          // Function to convert ADC value to voltage with averaging
  60          unsigned int calculate_ac_voltage(int channel) {
  61   1          int i;
  62   1          unsigned long adc_sum = 0;
  63   1          float V_adc, V_dc, V_rms, adc_avg;      
  64   1      
  65   1          // Take multiple samples and accumulate them
  66   1          for (i = 0; i < NUM_SAMPLES; i++) {
  67   2              adc_sum += read_ADC(channel);  // Read ADC value and add to the sum
  68   2          }
  69   1          
  70   1          // Calculate the average ADC value
  71   1          adc_avg = (float)adc_sum / NUM_SAMPLES;   //260 ADC value for 100vac
  72   1      
  73   1          // Convert ADC average to voltage
  74   1          V_adc = (adc_avg / ADC_MAX) * V_REF;  //0.317  Vdc voltage at pin of mc
  75   1                                                            
  76   1          // Calculate peak voltage before voltage divider
  77   1          V_dc = V_adc / (R2 / (R1 + R2));   //70.0    Vdc after voltage divider
  78   1      
  79   1          // Convert Vdc to Vac
  80   1          V_rms = V_dc / FACTOR_RMS;         // 99.07 Vac after convert dc to ac
  81   1          
  82   1          // Add Doide drop
  83   1          V_rms +=  0.9;                  // 100 Vac 
  84   1          
  85   1          // Constants for calibration
  86   1          V_rms *=  1.58;
  87   1          return (unsigned int)V_rms;
  88   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    533    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
